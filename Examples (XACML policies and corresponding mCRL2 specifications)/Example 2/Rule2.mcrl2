
		sort SAtt = struct attribute(name:SAttName, value:SAttValue);

		sort SAttName = struct subjectid;
		
		sort SAttValue = struct CareGiverA|Doctor;
		
		sort OAtt = struct attribute(name:OAttName, value:OAttValue);

		sort OAttName = struct resourceid;
		
		sort OAttValue = struct HealthData;
		
		sort AAtt = struct attribute(name:AAttName, value:AAttValue);

		sort AAttName = struct actionid;
		
		sort AAttValue = struct Read;
		
		sort Decision = struct Permit | Deny;
		
		sort ObgID = struct email | log;

		act
		Request:FSet(SAtt)#FSet(OAtt)#FSet(AAtt);
		Obligation:FSet(SAtt)#FSet(OAtt)#FSet(AAtt)#ObgID;
		Response:FSet(SAtt)#FSet(OAtt)#FSet(AAtt)#Decision;
		
		
		proc		
			PolicySet_root(RS:FSet(SAtt), RO:FSet(OAtt), RA:FSet(AAtt)) = 
			
				Policy_Policy1(RS,RO,RA);	
			
			Policy_Policy1(RS:FSet(SAtt), RO:FSet(OAtt), RA:FSet(AAtt))=	
							
					(	
						
							(attribute(resourceid,HealthData) in RO) &&
								
							(attribute(actionid,Read) in RA) 
							
					)->				
				
					Rule_Rule1(RS,RO,RA)+
								
					(	
							(attribute(actionid,Read) in RA) 
					)->				
					
					Rule_Rule2(RS,RO,RA);
					
			Rule_Rule1(RS:FSet(SAtt), RO:FSet(OAtt), RA:FSet(AAtt))=
			
					(attribute(subjectid,Doctor) in RS)-> 
														Response(RS,RO,RA,Permit);
			
			Rule_Rule2(RS:FSet(SAtt), RO:FSet(OAtt), RA:FSet(AAtt))=
			
							(attribute(subjectid,Doctor) in RS)-> 
																Obligation(RS,RO,RA,log).Response(RS,RO,RA,Permit);
		
		init sum RS:FSet(SAtt).sum RO:FSet(OAtt).sum RA:FSet(AAtt).(RS !={} && RO !={} && RA !={})->Request(RS,RO,RA).PolicySet_root(RS,RO,RA);
	